#!/usr/bin/env bash
#
# mzbuild - Build helper for bananapkg
#
# version:
#   0.1.0a
# author:
#   José Almeida <jose.afga@gmail.com>

# exit when command status not equal 0
set -e

# enable bash libs if available
[[ -f /usr/lib/bash/realpath ]] && enable -f /usr/lib/bash/realpath realpath
[[ -f /usr/lib/bash/dirname ]] && enable -f /usr/lib/bash/dirname dirname


# INTERNALS
# ===============

# replace info/desc fields
# ' or " is illegal as a previously filled value
__desc_replace() {
    # based on: https://github.com/dylanaraps/pure-bash-bible#use-regex-on-a-string
    if [[ "$1" =~ (("$2".)[^\"\']*(.)) ]]; then
        printf '%s\n' "${1/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}${3}${BASH_REMATCH[3]}}"
    fi
}

__ask_confirmation() {
    local answer

    printf '%s' "${1}? [s/N]: "
    read answer

    # return test exit code (zero if yes)
    [[ "$answer" =~ ^[sSyY] ]]
}

__checksum() {
    if [[ "${1%% *}" == "$2" ]]; then
        printf '%s\n' "Sucesso: checksum verificado."
    else
        printf '%s\n' 'Erro: checksum não confere.'
        __ask_confirmation 'Continuar mesmo assim' || exit 1
    fi
}

_show_version() {
    printf '%s\n' "mzbuild 0.1.0-alpha"
}

_parse_params() {
    # based on: https://pretzelhands.com/posts/command-line-flags
    local skip      # if is set skip next loop interation

    # set default values (optional)
    DOWNLOAD='true' # false, force, "whatever"
    VERBOSE='false' # true, false

    for param in "$@"; do
        # skip loop interation?
        [[ $skip ]] && unset skip && continue

        # use $param as current and $1..n as nexts
        shift

        case $param in
            --force-download) DOWNLOAD='force' ;;
            --no-download) DOWNLOAD='false' ;;
            -v | --verbose) VERBOSE='true' ;;
            -h | --help)
                # TODO: build a help
                echo "Se vira ..."
                exit 0
                ;;
            -V | --version)
                _show_version
                exit 0
                ;;
            *) # if there is no previous match
                [[ -f "$param" ]] && MZBFILE="$param" && continue

                # check if the word have multiple parameters
                # and separate each char in a new parameter
                if [[ "$param" =~ ^\-[a-z]{2,} ]]; then
                    local -a params

                    for ((i = 1; i < ${#param}; i++)); do
                        params+=("-${param:i:1}")
                    done

                    # parse new and remaining params
                    _parse_params "${params[@]}" "$@"
                    break
                fi
                ;;
        esac
    done
}

_download() {
    # if file exists not download again
    if [[ ! -f "$1" || "$DOWNLOAD" == 'force' ]]; then
        printf '%s\n' 'Fazendo o download...'
        # wget -cq --show-progress "${URL}" -O "$1"
        curl -L --retry 5 --retry-max-time 60 "${URL}" -o "$1"
    else
        printf '%s\n' "Aviso: $1 arquivo já existe."
    fi
}

_checksum() {
    [[ "$CHECKSUM_MD5" ]] && __checksum "$(md5sum "$1")" "$CHECKSUM_MD5"
    [[ "$CHECKSUM_SHA256" ]] && __checksum "$(sha256sum "$1")" "$CHECKSUM_SHA256"

    # prevent command status != 0
    return 0
}

_extract() {
    printf '%s\n' 'Extraindo arquivos...'
    pushd $tmpdir

    # TODO: check if recipe have extract function and run it
    # extract in source dir
    tar -xvf "$1" --one-top-level=src

    popd
}

_build() {
    printf '%s\n' 'Compilando ...........'
    pushd $srcdir

    # execute recipe function
    type -p build &>/dev/null && build

    popd
    printf '%s\n' "Sucesso: arquivos em ${tmpdir}/bin"
}

_package() {
    printf '%s\n' 'Criando pacote...'
    pushd $srcdir

    # execute recipe function
    type -p package &>/dev/null && package

    cd $bindir
    # banana time
    banana -g "$filename"

    # get info/desc file content
    bananadesc="$(<"$bindir/info/desc")"

    # replace info/desc content
    bananadesc="$(__desc_replace "$bananadesc" 'maintainer=' "$MAINTAINER")"
    bananadesc="$(__desc_replace "$bananadesc" 'license=' "$LICENSE")"
    : "$(fold -w 65 -s <<<"$DESCRIPTION")" # wrap long text
    bananadesc="$(__desc_replace "$bananadesc" 'desc=' "$_")"
    bananadesc="$(__desc_replace "$bananadesc" 'url=' "$HOMEPAGE")"
    # format array values
    : "$(printf "'%s' " "${deps[@]}")"
    : "${_%\'*}"
    : "${_#*\'}"
    bananadesc="$(__desc_replace "$bananadesc" 'dep=(' "$_")"

    # write info/desc new content
    printf '%s\n' "$bananadesc" >"$bindir/info/desc"

    # TODO: create pos.sh, pre.sh and rm.sh

    banana -c "$filename.mz"

    popd
    printf '%s\n' "Sucesso: pacote em ${tmpdir}/$filename.mz"
}


# MAIN
# ===============

main() {
    # positional parameters parsing
    _parse_params "$@"

    # get recipe paths
    filepath="$(realpath $MZBFILE)"
    filedir="$(dirname $filepath)"

    # import recipe file
    if ! source $MZBFILE &>/dev/null; then
        printf '%s\n' 'Erro: não foi possível importar o aquivo de receita.'
        exit 1
    fi

    filename="${NAME}-${VERSION}-${BUILD}"
    extension="${URL#*$VERSION.}"

    # download source in the same directory of recipe file
    [[ "$DOWNLOAD" != 'false' ]] && _download "$filedir/$filename.$extension"
    _checksum "$filedir/$filename.$extension"

    # exec as root only
    if [[ $UID -ne 0 ]]; then
        printf '%s\n' 'A partir daqui é necessário estar como root, faça o login...'

        # TODO: improve $filepath param pass
        pkexec "$(realpath $0)" "$@" "$filepath" --no-download
        exit 0
    fi

    # directory in /tmp with random name
    tmpdir="$(mktemp -dp /tmp 'mzbuild.XXXXXXXX')" # 8 random chars
    # tmpdir="/tmp/xdo_$(tr -dc 'a-zA-Z0-9' </dev/urandom 2>/dev/null | head -c 32)"

    # dir for souces and binaries
    srcdir="$tmpdir/src"
    bindir="$tmpdir/bin"

    # create directories in /tmp and use as workdir
    mkdir "$srcdir" "$bindir"
    cd "$tmpdir"

    # now begin processes
    _extract "$filedir/$filename.$extension"
    _build
    _package
    # TODO: install option
}

main "$@"

exit 0
