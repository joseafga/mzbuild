#!/usr/bin/env bash
#
# mzbuild - Build helper for bananapkg
#
# version:
#   0.1.0a
# author:
#   José Almeida <jose.afga@gmail.com>

# exit when command status not equal 0
set -e

# enable bash libs if available
[[ -f /usr/lib/bash/realpath ]] && enable -f /usr/lib/bash/realpath realpath
[[ -f /usr/lib/bash/dirname ]] && enable -f /usr/lib/bash/dirname dirname

# log level type codes
LERROR=4
LWARNING=2
LSUCCESS=1
lmsg=('' 'Sucesso: ' 'Alerta: ' 'Erro: ')

# INTERNALS
# ===============

# replace info/desc fields
# ' or " is illegal as a previously filled value
__desc_replace() {
    # based on: https://github.com/dylanaraps/pure-bash-bible#use-regex-on-a-string
    if [[ "$1" =~ (("$2".)[^\"\']*(.)) ]]; then
        printf '%s\n' "${1/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}${3}${BASH_REMATCH[3]}}"
    fi
}

__ask_confirmation() {
    local answer

    printf '%s' "${1} Continuar? [s/N]: "
    read answer

    # return test exit code (zero if yes)
    [[ "$answer" =~ ^[sSyY] ]]
}

__checksum() {
    if [[ "${1%% *}" == "$2" ]]; then
        _log 'Checksum do arquivo verificado.' $LSUCCESS
    else
        __ask_confirmation "$(_log 'Checksum do arquivo não confere.' $LERROR)" || exit 1
    fi
}

# usage: _log <text> [type]
_log() {
    if [[ "$VERBOSE" == 'true' ]]; then
        # all types
        printf '%s\n' "${lmsg[$2]}${1}"
    else
        # only errors or higher
        [[ "$2" -ge 3 ]] && printf '%s\n' "${lmsg[$2]}${1}"
    fi

    return 0
}

_show_version() {
    printf '%s\n' 'mzbuild 0.1.0-alpha'
}

_parse_params() {
    # based on: https://pretzelhands.com/posts/command-line-flags
    local skip # if is set skip next loop interation

    # set default values (optional)
    VERBOSE='false'
    DOWNLOAD='true'
    CHECKSUM='true'
    INSTALL='false'

    for param in "$@"; do
        # skip loop interation?
        [[ $skip ]] && unset skip && continue

        # use $param as current and $1..n as nexts
        shift

        case $param in
            --force-download) DOWNLOAD='force' ;;
            --no-download) DOWNLOAD='false' ;;
            --no-checksum) CHECKSUM='false' ;;
            -i | --install) INSTALL='true' ;;
            -v | --verbose) VERBOSE='true' ;;
            -h | --help)
                # TODO: build a help
                echo "Se vira ..."
                exit 0
                ;;
            -V | --version)
                _show_version
                exit 0
                ;;
            *) # if there is no previous match
                [[ -f "$param" ]] && MZBFILE="$param" && continue

                # check if the word have multiple parameters
                # and separate each char in a new parameter
                if [[ "$param" =~ ^\-[a-z]{2,} ]]; then
                    local -a params

                    for ((i = 1; i < ${#param}; i++)); do
                        params+=("-${param:i:1}")
                    done

                    # parse new and remaining params
                    _parse_params "${params[@]}" "$@"
                    break
                fi

                # no matchs :(
                _log "Parâmetro não reconhecido: $param"
                ;;
        esac
    done
}

_download() {
    # if file exists not download again
    if [[ ! -e "$1" || "$DOWNLOAD" == 'force' ]]; then
        _log 'Fazendo o download...'

        # execute recipe function OR this
        type -p download &>/dev/null && download || {
            # download based on url extension
            if [[ "$extension" == 'git' ]]; then
                git clone "$URL" "$1"
            else
                # wget -cq --show-progress "${URL}" -O "$1"
                curl -L --retry 5 --retry-max-time 60 "$URL" -o "$1"
            fi
        }
    else
        _log "$1 arquivo já existe." $LWARNING
    fi
}

_checksum() {
    [[ "$CHECKSUM_MD5" ]] && __checksum "$(md5sum "$1")" "$CHECKSUM_MD5"
    [[ "$CHECKSUM_SHA256" ]] && __checksum "$(sha256sum "$1")" "$CHECKSUM_SHA256"

    return 0
}

_extract() {
    # execute recipe function
    type -p extract &>/dev/null && extract || {
        # do nothing if .git
        [[ "$extension" == 'git' ]] && return 0

        # extract in source dir
        if [[ "$VERBOSE" == 'true' ]]; then
            tar -xvf "$1" --one-top-level=src
        else
            tar -xf "$1" --one-top-level=src
        fi
    }

    return 0
}

_build() {
    # execute recipe function
    type -p build &>/dev/null && build

    return 0
}

_package() {
    # execute recipe function
    type -p package &>/dev/null && package

    cd "$bindir"
    # banana time
    banana -g "$filename"

    # get info/desc file content
    bananadesc="$(<"$bindir/info/desc")"

    # replace info/desc content
    bananadesc="$(__desc_replace "$bananadesc" 'maintainer=' "$MAINTAINER")"
    bananadesc="$(__desc_replace "$bananadesc" 'license=' "$LICENSE")"
    : "$(fold -w 65 -s <<<"$DESCRIPTION")" # wrap long text
    bananadesc="$(__desc_replace "$bananadesc" 'desc=' "$_")"
    bananadesc="$(__desc_replace "$bananadesc" 'url=' "$HOMEPAGE")"
    # format array values
    : "$(printf "'%s' " "${deps[@]}")"
    : "${_%\'*}"
    : "${_#*\'}"
    bananadesc="$(__desc_replace "$bananadesc" 'dep=(' "$_")"

    # write info/desc new content
    printf '%s\n' "$bananadesc" >|"$bindir/info/desc"

    # TODO: create pos.sh, pre.sh and rm.sh

    banana -c "$filename.mz" || _log "Houveram erros na criação do pacote." $LWARNING

    return 0
}

_install() {
    banana -i "${tmpdir}/$filename.mz"
}

_init() {
    _log 'Extraindo arquivos...'
    pushd "$tmpdir" &>/dev/null
    _extract "$filedir/$filename"
    popd &>/dev/null

    _log 'Compilando...........'
    pushd "$srcdir" &>/dev/null
    _build
    popd &>/dev/null
    _log "Arquivos em ${bindir}" $LSUCCESS

    _log 'Criando pacote...'
    pushd "$srcdir" &>/dev/null
    _package
    popd &>/dev/null
    printf '%s\n' "Pacote em ${tmpdir}/$filename.mz"

    _log 'Instalando...'
    pushd "$tmpdir" &>/dev/null
    _install
    popd &>/dev/null
    _log 'Instalação concluída' $LSUCCESS
}

# MAIN
# ===============

main() {
    # positional parameters parsing
    _parse_params "$@"

    # get recipe paths
    filepath="$(realpath $MZBFILE)"
    filedir="$(dirname $filepath)"

    # import recipe file
    if ! source $MZBFILE &>/dev/null; then
        _log 'Não foi possível importar o aquivo de receita.' $LERROR
        exit 1
    fi

    filename="${NAME}-${VERSION}-${BUILD}"
    extension="${URL##*.}"

    # download source in the same directory of recipe file
    [[ "$DOWNLOAD" != 'false' ]] && _download "$filedir/$filename"
    [[ "$CHECKSUM" != 'false' ]] && _checksum "$filedir/$filename"

    # exec as root only
    if [[ $UID -ne 0 ]]; then
        _log 'A partir daqui é necessário estar como root, faça o login...'

        # TODO: improve $filepath param pass
        pkexec "$(realpath $0)" "$@" "$filepath" --no-download --no-checksum
        exit 0
    fi

    # directory in /tmp with random name
    tmpdir="$(mktemp -dp /tmp 'mzbuild.XXXXXXXX')" # 8 random chars
    # tmpdir="/tmp/xdo_$(tr -dc 'a-zA-Z0-9' </dev/urandom 2>/dev/null | head -c 32)"

    # dir for souces and binaries
    srcdir="$tmpdir/src"
    bindir="$tmpdir/bin"

    # create directories in /tmp and use as workdir
    mkdir "$srcdir" "$bindir"
    cd "$tmpdir"

    # begin processes
    _init
}

main "$@"

exit 0
